{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearch/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","_jsx","alt","style","display","width","height","objectFit","margin","src","img","useMarvelService","_useHttp","_useState","useState","_useState2","_slicedToArray","process","setProcess","request","useCallback","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","method","body","headers","response","data","_args","arguments","wrap","_context","prev","next","length","undefined","fetch","sent","ok","Error","concat","status","json","abrupt","t0","stop","_x","apply","clearError","useHttp","_apiBase","_apiKey","getAllCharachters","offset","res","results","map","_transformCharacter","getAllComics","_ref2","_callee2","_args2","_context2","_transformComics","getComicsByCharId","_ref3","_callee3","charID","_context3","getComic","_ref4","_callee4","id","_context4","_x2","getCharachter","_ref5","_callee5","_context5","_x3","getCharachterByName","_ref6","_callee6","name","_context6","_x4","char","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","pageCount","language","textObjects","detailUrl","price","prices","Skeleton","_jsxs","_Fragment","children","className","setContent","Component","Spinner","View","slice","styleForNotFound","indexOf","href","RandomChar","setChar","_useMarvelService","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","props","charList","setCharList","_useState3","_useState4","newItemLoading","setNewItemLoading","_useState5","_useState6","setOffset","_useState7","_useState8","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newCharList","ended","_toConsumableArray","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","ComicsListByChar","charId","comicsList","setComicsList","_useMarvelService2","loading","error","onComicsListLoaded","Link","to","errorMessage","spinner","CharInfo","CharSearchForm","Formik","initialValues","charName","validationSchema","Yup","min","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","args","Array","_key","call","state","_createClass","value","errorInfo","console","log","this","setState","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/6.0e12589c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","\r\nimport img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return(\r\n        // <img src={process.env.PUBLIC_URL + '/error.gif'} />\r\n        <img alt='Error' style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto' }} src={img} />\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","\r\nimport {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {request, clearError, process, setProcess} = useHttp(); \r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=b953babdf4209ae59acabaf06a8feede';\r\n    const _baseOffset = 210;\r\n\r\n    const getAllCharachters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = 0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComicsByCharId = async (charID) => {\r\n        const res = await request(`${_apiBase}characters/${charID}/comics?&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharachter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getCharachterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description,\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            detailUrl: comics.urls[0].url,\r\n            price: comics.prices[0].price === 0 ? 'NOT AVAILABLE' : comics.prices[0].price,\r\n        }\r\n    }\r\n\r\n    return {clearError, process, setProcess, getAllCharachters, getCharachter, getAllComics, getComic, getComicsByCharId, getCharachterByName};\r\n}\r\n\r\nexport default useMarvelService;","\r\nimport { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        setProcess('loading');\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`)\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n\r\n        } catch(e) {\r\n            setProcess('error');\r\n\r\n            throw e;\r\n        }\r\n\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess};\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","\r\nimport Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\n\r\nconst setContent = (process, Component, data) => {\r\n    switch (process) {\r\n        case 'waiting':\r\n            return <Skeleton />;\r\n\r\n        case 'loading':\r\n            return <Spinner/>;\r\n        \r\n        case 'confirmed':\r\n            return <Component data={data}/>;\r\n        \r\n        case 'error':\r\n            return <ErrorMessage/>;\r\n\r\n        default:\r\n            throw new Error('Unexpected process state');\r\n    }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","\nimport { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState(null);\n    \n    const {getCharachter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n        // eslint-disable-next-line\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        \n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n\n        getCharachter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'));\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    var {name, description, thumbnail, homepage, wiki} = data;\n\n    if (!description) {\n        description = `There should be a description here, but it hasn't been written yet...`;\n    }\n\n    if (description.length > 185) {\n        description = description.slice(0, 185) + '...';\n    }\n\n    const styleForNotFound = thumbnail.indexOf('image_not_available') !== -1 ? {objectFit: 'contain'} : null;\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={styleForNotFound} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","\nimport { useEffect, useState, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport './charList.scss';\n\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner/>;\n\n        case 'loading':\n            return newItemLoading ? <Component/> : <Spinner/>;\n        \n        case 'confirmed':\n            return <Component/>;\n        \n        case 'error':\n            return <ErrorMessage/>;\n\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    \n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {getAllCharachters, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        setNewItemLoading(!initial)\n\n        getAllCharachters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newCharList) => {\n\n        let ended = false;\n\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    function renderItems(arr) {\n\n        const items = arr.map((item, i) => {\n            let imgStyle = {'objectFit': 'cover'};\n\n            if (item.thumbnail.indexOf('image_not_available')) {\n                imgStyle = {'objectFit': 'unset'}\n            }\n\n            return(\n                <CSSTransition key={i} timeout={500} classNames=\"char__item\">\n                    <li\n                        tabIndex={0}\n                        className=\"char__item\"\n                        ref={el => itemRefs.current[i] = el}\n                        key={i}\n\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}\n                    >\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return(\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(charList), newItemLoading);\n        // eslint-disable-next-line\n    }, [process])\n    \n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}\n            >\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func,\n}\n\nexport default CharList;","\nimport { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charInfo.scss';\nimport setContent from '../../utils/setContent';\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    \n    const {getCharachter, clearError, process, setProcess} = useMarvelService();\n    \n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId]);\n\n    const updateChar = () => {\n        const {charId} = props;\n\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n\n        getCharachter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    \n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\nconst View = ({data}) => {\n    const {name, description, thumbnail, homepage, wiki, comics, id} = data;\n\n    const styleForNotFound = thumbnail.indexOf('image_not_available') !== -1 ? {objectFit: 'contain'} : null;\n    \n    return(\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={styleForNotFound} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">{description}</div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {   \n                    <ComicsListByChar charId={id}/>\n                }\n            </ul>\n        </>\n    );\n}\n\nconst ComicsListByChar = ({charId}) => {\n    const comicsMaxLength = 10;\n    const [comicsList, setComicsList] = useState([]);\n\n    const {loading, error, getComicsByCharId} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(charId);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (charId) => {\n        getComicsByCharId(charId)\n            .then(onComicsListLoaded)\n    }\n\n    const onComicsListLoaded = (comicsList) => {\n        setComicsList([...comicsList]);\n    }\n\n    function renderItems(items) {\n        const comics = items.map((item, i) => {\n            if (comicsMaxLength <= i) return false;\n    \n            return(\n                <li key={i} className=\"char__comics-item\">\n                    <Link to={`/comics/${item.id}`}>{item.title}</Link>\n                </li>\n            )\n        })\n\n        return comics;\n    }\n\n    const items = renderItems(comicsList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n\n    return (\n        <>\n            {errorMessage}\n            {spinner}\n            {items}\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number,\n}\n\nexport default CharInfo;","\r\nimport { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport './charSearchForm.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    \r\n    const {getCharachterByName, clearError, process, setProcess} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n\r\n        clearError();\r\n\r\n        getCharachterByName(name)\r\n            .then(onCharLoaded)\r\n            .then(() => setProcess('confirmed'))\r\n    }\r\n\r\n    const errorMessage = process === 'error' ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return(\r\n        <div className='char__search-form'>\r\n            <Formik\r\n                initialValues={{\r\n                    charName: '',\r\n                }}\r\n\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string()\r\n                        .min(2, \"Minimum length - 2 symbols\")\r\n                        .required('This field is required'),\r\n                })}\r\n\r\n                onSubmit={({charName}) => {\r\n                    updateChar(charName)\r\n                }}\r\n            >\r\n                <Form className='form '>\r\n                    <label htmlFor=\"charName\" className=\"char__search-label\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field name=\"charName\" id=\"charName\" type=\"text\" className='input' placeholder='Enter name' />\r\n\r\n                        <button type='submit' className=\"button button__main\" disabled={process === 'loading'} ><div className=\"inner\">FIND</div></button>\r\n                    </div>\r\n\r\n                    \r\n                    <FormikErrorMessage className='char__search-error' name='charName' component='div'/>\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component{\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true,\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from \"../charSearch/CharSearchForm\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <meta name=\"description\" content=\"Marvel information portal\" />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            \r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n                \r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}